Ce fichier sert à expliquer chaque étape du jeu réalisée. Ca permet de 
comprendre le code source et ça sera utile pour la présentation du projet
de fin de semestre.

* Affichage de la carte :
Le niveau est écrit dans carte.txt, chaque chiffre correspond à un élément de
la carte. Dans lireFichier(), on lit chaque chiffre et on
remplit la carte 2D qui nous sera utile dans tout le programme.
Dans la carte peuvent se trouver uniquement : murs, briques, vide, items
(flamme+, bombe+, roller etc...), flammes causées par les bombes. 
Les personnages ne sont pas présents dans la carte, 
on préfère repérer leurs positions en pixels en créant des variables SDL_Rect.




* POSE DE BOMBE :

Chaque joueur a un nombre total de bombes à la base, et un nombre de bombes
restantes (2 variables différentes).
Pour chaque joueur, on vérifie si la touche de pose de bombe a été appuyée dans la boucle de jeu.
Si oui, on vérifie si il lui reste au moins 1 bombe et si la touche d'appui de bombe
n'était pas déjà appuyée à l'instant t-1 (très important ! On veut qu'il ne puisse poser
qu'une seule bombe à la fois, même si il reste appuyé).
Si les conditions sont vérifiées, on appelle la
fonction poserBombe().





* EXPLOSION DE BOMBE :

1) On vérifie à la fin de la boucle des événements si la première
bombe posée par chaque joueur peut exploser, dans verifierDelai().

Si la fn renvoie 1, on fait exploser la bombe grâce à exploserBombe().


grâce à supprimerBombe() :
- Décrémentation de listeBombe->taille
- Incrémentation de bombesRestantes
- Détermination de la portée de la bombe dans determinerPortee()
- Ajout d'une bombe explosée dans la liste bombesExplosées
  afin de traiter plus tard le délai de présence des flammes sur
  sur la carte
- Affichage de l'explosion dans afficherExplosion() 






* Affichage de l'explosion :

D'abord on doit définir sa portée dans les 4 directions.
Ca va se faire dans determinerPortee() :

for(i=1; i<=puissanceBombe; i++)
{
	// HAUT :
	if(posB.y >= i && carte[posB.y - i][posB.x] == VIDE ou FLAMME
		       && bool[HAUT])
		portee[HAUT]++;
	else
		bool[HAUT] = 0;

	// Pareil pour les 3 autres directions
}


A partir de là, on a la portée de la bombe dans les 4 directions, 
regroupée dans un tableau portee. On part de la position de cette
bombe et on inscrit dans la carte 2D des flammes dans les 4 directions
de cette bombe selon la portée. 
Cela se fera dans afficherExplosion().
L'explosion est graphiquement représentée.
Reste à déterminer l'instant où il faut retirer ces flammes et retrouver 
du vide.

Pour l'affichage de l'explosion, c'est une question 
de délai (l'explosion doit être visible pendant DELAI_FLAMME millisecondes).
A chaque fois qu'une bombe explose, on enregistre sa position 
sur la carte et sa portée dans une liste chaînée de bombes 
qui ont explosé, bombesExplosees.
Dans la boucle principale de jeu, on vérifie pour l'ensemble de cette liste
si le délai est respecté dans verifierDelai(). Si oui, on efface l'explosion
grâce à afficherExplosion().


* Conséquences de la bombe :

- Cassage des briques : Au moment de la détermination de la portée, dans
determinerPortee():
la flamme parcoure le terrain et s'arrêtera si elle rencontre une brique. 
Si oui, dans un tableau de 4 briques (pour chaque direction) dans la 
classe brique de la structure Maillon, on attribue 
la valeur 1 à la direction donnée, ça veut dire que cette bombe va casser
une brique dans cette direction.
On note la position de la brique à casser. Dans jouerPartie(), au moment où on
détermine l'explosion des flammes, on vérifie aussi si des briques doivent
être cassées dans casserBrique(). Voilà.

Explosion d'une autre bombe sur son passage :
Tuer un joueur :
Brûler des items : ça fonctionne déjà, lorsqu'elle rencontre un item elle
l'écrase en posant sa FLAMME
